{"ast":null,"code":"import Storage from 'react-native-storage';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar storage = new Storage({\n  size: 2000,\n  storageBackend: AsyncStorage,\n  autoSync: false,\n  defaultExpires: null,\n  enableCache: true,\n  sync: {}\n});\nexport default storage;","map":{"version":3,"sources":["C:/Users/Umar/Documents/FLUTTER/jeffv2/Storage.js"],"names":["Storage","AsyncStorage","storage","size","storageBackend","autoSync","defaultExpires","enableCache","sync"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,OAAO,GAAG,IAAIF,OAAJ,CAAY;AAE1BG,EAAAA,IAAI,EAAE,IAFoB;AAM1BC,EAAAA,cAAc,EAAEH,YANU;AAO1BI,EAAAA,QAAQ,EAAE,KAPgB;AAU1BC,EAAAA,cAAc,EAAE,IAVU;AAa1BC,EAAAA,WAAW,EAAE,IAba;AAkB1BC,EAAAA,IAAI,EAAE;AAlBoB,CAAZ,CAAhB;AAuBA,eAAeN,OAAf","sourcesContent":["import Storage from 'react-native-storage';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst storage = new Storage({\n  // maximum capacity, default 1000 key-ids\n  size: 2000,\n\n  // Use AsyncStorage for RN apps, or window.localStorage for web apps.\n  // If storageBackend is not set, data will be lost after reload.\n  storageBackend: AsyncStorage, // for web: window.localStorage\n  autoSync: false,\n  // expire time, default: 1 day (1000 * 3600 * 24 milliseconds).\n  // can be null, which means never expire.\n  defaultExpires: null,\n\n  // cache data in the memory. default is true.\n  enableCache: true,\n\n  // if data was not found in storage or expired data was found,\n  // the corresponding sync method will be invoked returning\n  // the latest data.\n  sync: {\n    // we'll talk about the details later.\n  }\n});\n\nexport default storage;"]},"metadata":{},"sourceType":"module"}